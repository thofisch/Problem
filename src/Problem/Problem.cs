using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;

namespace Trifork
{
    public class Problem
    {
        private readonly Uri type;
        private readonly String title;
        private readonly StatusType status;
        private readonly String detail;
        private readonly Uri instance;
        private readonly IDictionary<String, Object> parameters;

        public Problem(Uri type) : this(type, null)
        {
        }

        public Problem(Uri type, String title) : this(type, title, null)
        {
        }

        public Problem(Uri type, String title, StatusType status) : this(type, title, status, null)
        {
        }

        public Problem(Uri type,
            String title,
            StatusType status,
            String detail) : this(type, title, status, detail, null)
        {
        }

        public Problem(Uri type,
            String title,
            StatusType status,
            String detail,
            Uri instance) : this(type, title, status, detail, instance, null)
        {
        }

        public Problem(Uri type,
            String title,
            StatusType status,
            String detail,
            Uri instance,
            Problem cause) : this(type, title, status, detail, instance, cause, null)
        {
        }

        public Problem(Uri type,
            String title,
            StatusType status,
            String detail,
            Uri instance,
            Problem cause,
            IDictionary<String, Object> parameters)
        {
            this.type = type;
            this.title = title;
            this.status = status;
            this.detail = detail;
            this.instance = instance;
            this.parameters = parameters ?? new Dictionary<string, object>();
        }

        /// <summary>
        /// An absolute Uri that identifies the problem type. When dereferenced,
        /// it SHOULD provide human-readable documentation for the problem type
        /// (e.g., using HTML). When this member is not present, its value is
        /// assumed to be "about:blank".
        ///
        /// @return an absolute Uri that identifies this problem's type
        /// </summary>
        public Uri getType()
        {
            return type;
        }

        /// <summary>
        /// A short, human-readable summary of the problem type. It SHOULD NOT
        /// change from occurrence to occurrence of the problem, except for
        /// purposes of localisation.
        ///
        /// @return a short, human-readable summary of this problem
        /// </summary>
        public String getTitle()
        {
            return title;
        }

        /// <summary>
        /// The HTTP status code generated by the origin server for this
        /// occurrence of the problem.
        ///
        /// @return the HTTP status code
        /// </summary>
        public StatusType getStatus()
        {
            return status;
        }

        /// <summary>
        /// A human readable explanation specific to this occurrence of the problem.
        ///
        /// @return A human readable explaination of this problem
        /// </summary>
        public String getDetail()
        {
            return detail;
        }

        /// <summary>
        /// An absolute Uri that identifies the specific occurrence of the problem.
        /// It may or may not yield further information if dereferenced.
        ///
        /// @return an absolute Uri that identifies this specific problem
        /// </summary>
        public Uri getInstance()
        {
            return instance;
        }

        /// <summary>
        /// Optional, additional attributes of the problem. Implementations can choose to ignore this in favor of concrete,
        /// typed fields.
        ///
        /// @return additional parameters
        /// </summary>
        public IDictionary<String, Object> getParameters()
        {
            return new ReadOnlyDictionary<String, Object>(parameters);
        }

        public Problem getCause()
        {
            throw new NotImplementedException();
        }

        public static ProblemBuilder builder()
        {
            return new ProblemBuilder();
        }

        static Problem valueOf(StatusType status)
        {
            return ProblemBuilder.create(status).build();
        }

        static Problem valueOf(StatusType status, String detail)
        {
            return ProblemBuilder.create(status).withDetail(detail).build();
        }

        static Problem valueOf(StatusType status, Uri instance)
        {
            return ProblemBuilder.create(status).withInstance(instance).build();
        }

        static Problem valueOf(StatusType status, String detail, Uri instance)
        {
            return ProblemBuilder.create(status).withDetail(detail).withInstance(instance).build();
        }

        /// <summary>
        /// Specification by example:
        /// <p>
        /// <pre>{@code
        ///   // Returns "about:blank{404, Not Found}"
        ///   Problem.valueOf(NOT_FOUND).toString();
        ///
        ///   // Returns "about:blank{404, Not Found, Order 123}"
        ///   Problem.valueOf(NOT_FOUND, "Order 123").toString();
        ///
        ///   // Returns "about:blank{404, Not Found, instance=https://example.org/}"
        ///   Problem.valueOf(NOT_FOUND, Uri.create("https://example.org/")).toString();
        ///
        ///   // Returns "about:blank{404, Not Found, Order 123, instance=https://example.org/"}
        ///   Problem.valueOf(NOT_FOUND, "Order 123", Uri.create("https://example.org/")).toString();
        ///
        ///   // Returns "https://example.org/problem{422, Oh, oh!, Crap., instance=https://example.org/problem/123}
        ///   Problem.builder()
        ///       .withType(Uri.create("https://example.org/problem"))
        ///       .withTitle("Oh, oh!")
        ///       .withStatus(UNPROCESSABLE_ENTITY)
        ///       .withDetail("Crap.")
        ///       .withInstance(Uri.create("https://example.org/problem/123"))
        ///       .build()
        ///       .toString();
        /// }</pre>
        ///
        /// @param problem the problem
        /// @return a string representation of the problem
        /// @see Problem#valueOf(StatusType)
        /// @see Problem#valueOf(StatusType, String)
        /// @see Problem#valueOf(StatusType, Uri)
        /// @see Problem#valueOf(StatusType, String, Uri)
        /// </summary>
        protected static String toString(Problem problem)
        {
            var parts = new[]
            {
                problem.getStatus() == null ? null : problem.getStatus().StatusCode.ToString(),
                problem.getTitle(),
                problem.getDetail(),
                problem.getInstance() == null ? null : "instance=" + problem.getInstance(),
                //        problem.getParameters()
                //            .entrySet().stream()
                //            .map(Map.Entry::toString))
            }.Where(x => x != null);

            return $"{problem.GetType().Name} + {{{string.Join(", ", parts)}}}";
        }

        public String toString()
        {
            return Problem.toString(this);
        }
    }
}